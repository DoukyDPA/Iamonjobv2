# services/ai_service_mistral.py - Service IA avec vraie API Mistral
import os
import requests
import json
import logging
from typing import Optional

# Importer les nouveaux services
# (aucun import global de execute_ai_service ou AI_PROMPTS)
# Si besoin, fais l'import local dans la fonction concern√©e.

def call_mistral_api(prompt: str, context: Optional[str] = None, service_id: str = None) -> str:
    """
    Appelle l'API Mistral pour obtenir une r√©ponse IA avec tracking des tokens
    
    Args:
        prompt: Question/demande √† l'IA
        context: Contexte optionnel (contenu CV, offre, etc.)
    
    Returns:
        str: R√©ponse de Mistral IA
    """
    try:
        mistral_api_key = os.environ.get("MISTRAL_API_KEY")
        
        if not mistral_api_key:
            raise Exception("MISTRAL_API_KEY non configur√©e")
        
        # Construction du prompt complet
        full_prompt = _build_prompt(prompt, context)
        
        # Configuration de l'appel API
        url = "https://api.mistral.ai/v1/chat/completions"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {mistral_api_key}"
        }
        
        payload = {
            "model": "mistral-small-latest",  # Mod√®le rapide et efficace
            "messages": [
                {
                    "role": "system",
                    "content": "Tu es un expert en ressources humaines et coaching emploi. Tu aides les candidats √† optimiser leur recherche d'emploi avec des conseils pr√©cis et actionnables. R√©ponds toujours en fran√ßais avec un ton professionnel mais bienveillant."
                },
                {
                    "role": "user", 
                    "content": full_prompt
                }
            ],
            "max_tokens": 1000,
            "temperature": 0.7,
            "top_p": 1,
            "stream": False
        }
        
        print(f"ü§ñ Appel Mistral API...")
        
        # === TRACKING DES TOKENS ===
        # Estimer les tokens d'entr√©e (prompt + contexte)
        estimated_input_tokens = len(full_prompt.split()) * 1.3  # Estimation approximative
        
        response = requests.post(url, json=payload, headers=headers, timeout=30)
        
        if response.status_code == 200:
            response_data = response.json()
            ai_response = response_data['choices'][0]['message']['content']
            
            # === CALCUL DES TOKENS CONSOMM√âS ===
            usage = response_data.get('usage', {})
            input_tokens = usage.get('prompt_tokens', estimated_input_tokens)
            output_tokens = usage.get('completion_tokens', 0)
            total_tokens = usage.get('total_tokens', input_tokens + output_tokens)
            
            print(f"‚úÖ R√©ponse Mistral re√ßue: {len(ai_response)} caract√®res")
            print(f"üî¢ Tokens consomm√©s: {total_tokens} (entr√©e: {input_tokens}, sortie: {output_tokens})")
            
            # === ENREGISTREMENT DES TOKENS ===
            try:
                # R√©cup√©rer l'email de l'utilisateur depuis le contexte Flask
                from flask import request
                if hasattr(request, 'current_user') and request.current_user:
                    user_email = request.current_user.email
                    
                    # Importer et utiliser le token tracker
                    from services.token_tracker import record_tokens
                    
                    # Enregistrer la consommation de tokens
                    service_name = "mistral_api_call"
                    if "cv" in prompt.lower():
                        service_name = "cv_analysis"
                    elif "compatibilite" in prompt.lower() or "matching" in prompt.lower():
                        service_name = "compatibility_check"
                    elif "lettre" in prompt.lower():
                        service_name = "letter_generation"
                    elif "entretien" in prompt.lower():
                        service_name = "interview_prep"
                    
                    success = record_tokens(user_email, int(total_tokens), service_name)
                    if success:
                        print(f"‚úÖ Tokens enregistr√©s pour {user_email}: {total_tokens} tokens")
                    else:
                        print(f"‚ö†Ô∏è √âchec enregistrement tokens pour {user_email}")
                        
            except Exception as token_error:
                print(f"‚ö†Ô∏è Erreur tracking tokens: {token_error}")
                # Ne pas faire √©chouer l'appel principal pour une erreur de tracking
            
            return ai_response
        else:
            print(f"‚ùå Erreur API Mistral: {response.status_code}")
            print(f"üìã R√©ponse compl√®te: {response.text}")
            raise Exception(f"Erreur API Mistral {response.status_code}: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Erreur appel Mistral: {e}")
        print(f"üîç Type d'erreur: {type(e).__name__}")
        import traceback
        traceback.print_exc()
        raise e

def _build_prompt(prompt: str, context: Optional[str] = None) -> str:
    """Construit le prompt complet avec contexte"""
    
    if context:
        return f"""CONTEXTE:
{context}

DEMANDE:
{prompt}

Analyse le contexte fourni et r√©ponds de mani√®re d√©taill√©e et structur√©e."""
    else:
        return prompt

def _fallback_response(prompt: str, service_id: str = None) -> str:
    """R√©ponse de fallback si l'API Mistral n'est pas disponible"""
    
    prompt_lower = prompt.lower()
    
    # Priorit√© 0 : Services identifi√©s par leur ID (plus sp√©cifique)
    if service_id:
        service_id_lower = service_id.lower()
        
        # Services de lettre de motivation
        if "cover_letter" in service_id_lower or "letter" in service_id_lower:
            return """‚úâÔ∏è **G√©n√©ration de lettre de motivation** (Service temporairement indisponible)

La g√©n√©ration de lettre de motivation n√©cessite une configuration API.

üí° **Pour obtenir une lettre compl√®te :**
- Contactez l'administrateur pour configurer l'API Mistral
- Vos documents ont √©t√© enregistr√©s et seront utilis√©s d√®s que le service sera disponible

*Fonctionnalit√© temporairement d√©sactiv√©e.*"""
        
        # Services ATS
        elif "ats" in service_id_lower:
            return """üéØ **Optimisation ATS** (Service temporairement indisponible)

L'optimisation ATS de votre CV n√©cessite une configuration API.

üí° **Pour obtenir une optimisation compl√®te :**
- Contactez l'administrateur pour configurer l'API Mistral
- Votre CV a √©t√© enregistr√© et sera optimis√© d√®s que le service sera disponible

*Fonctionnalit√© temporairement d√©sactiv√©e.*"""
    
    # Priorit√© 1 : Services de compatibilit√©/matching (plus sp√©cifique)
    if ("compatibilit" in prompt_lower or "matching" in prompt_lower or 
        ("offre" in prompt_lower and "emploi" in prompt_lower)):
        return """üéØ **Analyse de compatibilit√©** (Service temporairement indisponible)

L'analyse de compatibilit√© n√©cessite une configuration API.

üí° **Pour obtenir une analyse compl√®te :**
- Contactez l'administrateur pour configurer l'API Mistral
- Vos documents ont √©t√© enregistr√©s et seront analys√©s d√®s que le service sera disponible

*Fonctionnalit√© temporairement d√©sactiv√©e.*"""

    # Priorit√© 2 : Services de lettre de motivation (AVANT CV g√©n√©rique)
    elif ("lettre" in prompt_lower or "motivation" in prompt_lower) or "cover_letter" in prompt_lower:
        return """‚úâÔ∏è **G√©n√©ration de lettre de motivation** (Service temporairement indisponible)

La g√©n√©ration de lettre de motivation n√©cessite une configuration API.

üí° **Pour obtenir une lettre compl√®te :**
- Contactez l'administrateur pour configurer l'API Mistral
- Vos documents ont √©t√© enregistr√©s et seront utilis√©s d√®s que le service sera disponible

*Fonctionnalit√© temporairement d√©sactiv√©e.*"""

    # Priorit√© 3 : Services d'entretien
    elif ("entretien" in prompt_lower or "interview" in prompt_lower):
        return """üé§ **Pr√©paration √† l'entretien** (Service temporairement indisponible)

La pr√©paration √† l'entretien n√©cessite une configuration API.

üí° **Pour obtenir une pr√©paration compl√®te :**
- Contactez l'administrateur pour configurer l'API Mistral
- Vos documents ont √©t√© enregistr√©s et seront utilis√©s d√®s que le service sera disponible

*Fonctionnalit√© temporairement d√©sactiv√©e.*"""

    # Priorit√© 4 : Services de CV (moins sp√©cifique)
    elif "cv" in prompt_lower or "curriculum" in prompt_lower:
        return """üìÑ **Analyse de CV** (Service temporairement indisponible)

L'analyse de votre CV n√©cessite une configuration API.

üí° **Pour obtenir une analyse compl√®te :**
- Contactez l'administrateur pour configurer l'API Mistral
- Votre CV a √©t√© enregistr√© et sera analys√© d√®s que le service sera disponible

*Fonctionnalit√© temporairement d√©sactiv√©e.*"""

    else:
        return f"""ü§ñ **Assistant IA emploi** (Service temporairement indisponible)

L'intelligence artificielle n√©cessite une configuration API.

üí° **Services disponibles une fois configur√© :**
- üìÑ Analyse de CV personnalis√©e
- üéØ Compatibilit√© avec les offres d'emploi
- ‚úâÔ∏è R√©daction de lettres de motivation
- üé§ Pr√©paration aux entretiens

*Contactez l'administrateur pour activer l'API Mistral.*"""

# === FONCTIONS SP√âCIALIS√âES ===

def analyze_cv_with_ai(cv_content: str) -> str:
    """Analyse un CV avec l'IA Mistral"""
    
    prompt = """ANALYSE APPROFONDIE DE CV

Analyse ce CV de mani√®re professionnelle et d√©taill√©e. Fournis :

1. **SYNTH√àSE** (3-4 lignes de r√©sum√© du profil)

2. **POINTS FORTS** (5 √©l√©ments maximum)
   - Forces principales identifi√©es
   - Atouts comp√©titifs

3. **AXES D'AM√âLIORATION** (5 √©l√©ments maximum)  
   - Points faibles √† corriger
   - Manques identifi√©s

4. **RECOMMANDATIONS CONCR√àTES**
   - Actions pr√©cises √† mener
   - Optimisations sugg√©r√©es

5. **NOTE GLOBALE** /10 avec justification

Utilise un ton professionnel et bienveillant. Sois pr√©cis et actionnable."""

    return call_mistral_api(prompt, cv_content)



def generate_cover_letter_enhanced(cv_content: str, job_content: str, questionnaire_content: str = "", user_notes: str = "") -> str:
    """G√©n√®re une lettre de motivation personnalis√©e avec CV + Questionnaire + Offre"""
    
    # Construction du contexte enrichi
    context_parts = [f"=== CV DU CANDIDAT ===\n{cv_content}"]
    
    # Ajouter le questionnaire s'il est disponible
    if questionnaire_content:
        context_parts.append(f"=== PROFIL PERSONNEL ET ASPIRATIONS ===\n{questionnaire_content}")
    
    context_parts.append(f"=== OFFRE D'EMPLOI ===\n{job_content}")
    
    if user_notes:
        context_parts.append(f"=== NOTES PERSONNELLES ===\n{user_notes}")
    
    context = "\n\n".join(context_parts)
    
    # Prompt adapt√© selon la disponibilit√© du questionnaire
    questionnaire_instruction = ""
    if questionnaire_content:
        questionnaire_instruction = """
IMPORTANT : Utilise OBLIGATOIREMENT les informations du profil personnel pour :
- Personnaliser la motivation et les valeurs
- Adapter le discours aux aspirations du candidat  
- Cr√©er une coh√©rence entre le profil personnel et la candidature
- Montrer l'alignement entre les objectifs personnels et le poste"""
    else:
        questionnaire_instruction = """
NOTE : Seuls le CV et l'offre sont disponibles. Base-toi uniquement sur ces √©l√©ments."""
    
    prompt = f"""G√âN√âRATION DE LETTRE DE MOTIVATION PERSONNALIS√âE

√Ä partir des √©l√©ments fournis, r√©dige une lettre de motivation structur√©e, authentique et persuasive.

{questionnaire_instruction}

STRUCTURE DEMAND√âE :

**[EN-T√äTE]**
[Vos coordonn√©es]
[Coordonn√©es entreprise]
[Date]

**OBJET :** Candidature pour le poste de [Titre exact du poste]

**[INTRODUCTION - Accroche personnalis√©e]**
- R√©f√©rence pr√©cise √† l'offre
- Motivation authentique pour ce poste PR√âCIS
- {f"Lien avec vos aspirations personnelles" if questionnaire_content else "Accroche bas√©e sur le CV"}

**[D√âVELOPPEMENT - Paragraphe 1 : VOS ATOUTS]**
- Comp√©tences cl√©s en lien direct avec les exigences
- Exp√©riences pertinentes avec r√©sultats concrets
- {f"Qualit√©s personnelles en phase avec vos valeurs" if questionnaire_content else "Soft skills d√©duites du CV"}

**[D√âVELOPPEMENT - Paragraphe 2 : VOTRE PROJET]**
- Ce que vous apportez concr√®tement √† l'entreprise
- {f"Coh√©rence avec vos objectifs de carri√®re" if questionnaire_content else "Projection professionnelle bas√©e sur le CV"}
- Valeur ajout√©e sp√©cifique pour ce poste

**[CONCLUSION]**
- Disponibilit√© et motivation pour un entretien
- Formule de politesse professionnelle

CONSIGNES DE R√âDACTION :
‚úÖ Personnalisez selon l'entreprise et ses valeurs
‚úÖ Utilisez les mots-cl√©s exacts de l'offre d'emploi
‚úÖ Ton professionnel mais authentique et enthousiaste
‚úÖ Longueur : 1 page maximum (300-400 mots)
‚úÖ {f"Int√©grez naturellement les √©l√©ments du profil personnel" if questionnaire_content else "Restez factuel bas√© sur le CV"}
‚úÖ √âvitez les clich√©s et formules toutes faites
‚úÖ Montrez votre connaissance de l'entreprise

Fournis la lettre compl√®te, pr√™te √† envoyer et parfaitement adapt√©e au candidat."""

    return call_mistral_api(prompt, context)

# Fonction de fallback pour compatibilit√© avec l'existant
def generate_cover_letter(cv_content: str, job_content: str, user_notes: str = "") -> str:
    """Version de compatibilit√© - utilise la version enhanced"""
    return generate_cover_letter_enhanced(cv_content, job_content, "", user_notes)

def prepare_interview(cv_content: str, job_content: str) -> str:
    """Pr√©pare un candidat √† l'entretien d'embauche"""
    
    prompt = """PR√âPARATION √Ä L'ENTRETIEN D'EMBAUCHE

√Ä partir du CV et de l'offre fournis, pr√©pare le candidat √† l'entretien.

FOURNIS :

1. **QUESTIONS PROBABLES** (10 questions types)
   - Questions sur le parcours
   - Questions techniques
   - Questions comportementales

2. **R√âPONSES SUGG√âR√âES**
   - Structure STAR pour les exemples
   - Points cl√©s √† mentionner
   - Exemples concrets du CV

3. **QUESTIONS √Ä POSER**
   - Sur le poste et les missions
   - Sur l'√©quipe et l'entreprise
   - Sur l'√©volution

4. **CONSEILS PRATIQUES**
   - Pr√©paration mat√©rielle
   - Attitude et communication
   - Gestion du stress

Format clair et actionnable pour une pr√©paration efficace."""

    context = f"CV:\n{cv_content}\n\nOFFRE:\n{job_content}"
    return call_mistral_api(prompt, context)

# === FONCTION PRINCIPALE POUR APP.PY ===

def chat_avec_ia(message: str, context: Optional[str] = None) -> str:
    """
    Fonction principale d'interaction avec l'IA
    Compatible avec l'interface existante
    """
    return call_mistral_api(message, context)

def chat_avec_ia_action_rapide_optimized(action: str) -> str:
    """Ex√©cute une action rapide avec Mistral IA"""
    return call_mistral_api(f"Action rapide: {action}")
