#!/usr/bin/env python3
"""
API d'authentification avec gestion des sessions Supabase
"""

import jwt
import datetime
import os
import logging
from functools import wraps
from flask import Blueprint, request, jsonify, session
from flask_login import login_user, logout_user, current_user, login_required
from werkzeug.security import check_password_hash, generate_password_hash
from models.user import User

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Cr√©ation du blueprint
auth_api = Blueprint('auth_api', __name__)

# Fonctions de compatibilit√©
def link_session_to_user(user_id, user_email):
    from services.supabase_storage import SupabaseStorage
    supabase = SupabaseStorage()
    session_data = supabase.get_session_data()
    session_data['user_id'] = user_id
    session_data['user_email'] = user_email
    return supabase.save_session_data(session_data)

def get_session_data():
    from services.supabase_storage import SupabaseStorage
    supabase = SupabaseStorage()
    return supabase.get_session_data()

def save_session_data(data):
    from services.supabase_storage import SupabaseStorage
    supabase = SupabaseStorage()
    return supabase.save_session_data(data)

# Configuration JWT
def generate_token(user_id):
    """G√©n√®re un token JWT pour l'utilisateur"""
    payload = {
        'user_id': str(user_id),
        'exp': datetime.datetime.utcnow() + datetime.timedelta(days=1),
        'iat': datetime.datetime.utcnow()
    }
    secret_key = os.environ.get('FLASK_SECRET_KEY') or 'dev_secret_key'
    return jwt.encode(payload, secret_key, algorithm='HS256')

def verify_jwt_token(f):
    """D√©corateur pour v√©rifier les tokens JWT au lieu de Flask-Login"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        try:
            print("=== DEBUG JWT TOKEN START ===")
            
            # R√©cup√©rer le token depuis les headers
            auth_header = request.headers.get('Authorization')
            print(f"1. Auth header: {auth_header}")
            if not auth_header:
                print("2. Pas d'auth header")
                return jsonify({"error": "Token d'authentification manquant"}), 401
            
            # Extraire le token (format: "Bearer <token>")
            if auth_header.startswith('Bearer '):
                token = auth_header[7:]
            else:
                token = auth_header
            
            print(f"3. Token extrait: {token[:50]}...")
            if not token:
                print("4. Token vide")
                return jsonify({"error": "Token invalide"}), 401
            
            # V√©rifier le token
            secret_key = os.environ.get('FLASK_SECRET_KEY') or 'dev_secret_key'
            print(f"5. Secret key: {secret_key}")
            payload = jwt.decode(token, secret_key, algorithms=['HS256'])
            print(f"6. Payload d√©cod√©: {payload}")
            
            # Extraire l'ID utilisateur
            user_id = payload.get('user_id')
            print(f"7. User ID extrait: {user_id}")
            if not user_id:
                print("8. Pas d'user_id dans le payload")
                return jsonify({"error": "Token invalide - ID utilisateur manquant"}), 401
            
            # R√©cup√©rer l'utilisateur depuis la base
            print(f"9. Appel User.get({user_id})")
            user = User.get(user_id)
            print(f"10. User r√©cup√©r√©: {user}")
            if not user:
                print("11. User non trouv√©")
                return jsonify({"error": "Utilisateur non trouv√©"}), 401
            
            # Ajouter l'utilisateur √† la requ√™te pour compatibilit√©
            request.current_user = user
            print("12. SUCCESS - Token valide")
            
            return f(*args, **kwargs)
            
        except jwt.ExpiredSignatureError as e:
            print(f"ERROR: Token expir√©: {e}")
            return jsonify({"error": "Token expir√©"}), 401
        except jwt.InvalidTokenError as e:
            print(f"ERROR: Token invalide: {e}")
            return jsonify({"error": "Token invalide"}), 401
        except Exception as e:
            print(f"ERROR: Exception g√©n√©rale: {e}")
            import traceback
            traceback.print_exc()
            logging.error(f"Erreur lors de la v√©rification du token: {e}")
            return jsonify({"error": "Erreur d'authentification"}), 500
        finally:
            print("=== DEBUG JWT TOKEN END ===")
    
    return decorated_function

@auth_api.route('/register', methods=['GET'])
def register_form():
    """Affiche le formulaire d'inscription"""
    return '''
    <!DOCTYPE html>
    <html lang="fr">
    <head>
        <meta charset="UTF-8">
        <title>Inscription - IAMONJOB</title>
        <style>
            body { font-family: Arial; background: linear-gradient(135deg, #0a6b79, #27a2b4); color: white; padding: 20px; }
            .container { max-width: 400px; margin: 50px auto; background: rgba(255,255,255,0.1); padding: 30px; border-radius: 15px; }
            input { width: 100%; padding: 12px; margin: 10px 0; border: none; border-radius: 8px; box-sizing: border-box; }
            button { width: 100%; padding: 12px; background: #0a6b79; color: white; border: none; border-radius: 8px; cursor: pointer; }
            button:hover { background: #085a66; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üöÄ Inscription IAMONJOB</h1>
            <form method="POST" action="/api/auth/register">
                <input type="email" name="email" placeholder="Email" required>
                <input type="password" name="password" placeholder="Mot de passe" required>
                <input type="password" name="confirm_password" placeholder="Confirmer le mot de passe" required>
                <div style="margin: 15px 0;">
                    <label>
                        <input type="checkbox" name="data_consent" required>
                        J'accepte le traitement de mes donn√©es
                    </label>
                </div>
                <button type="submit">S'inscrire</button>
            </form>
            <div style="margin-top: 20px; text-align: center;">
                <a href="/" style="color: white;">‚Üê Retour √† l'accueil</a>
            </div>
        </div>
    </body>
    </html>
    '''

@auth_api.route('/register', methods=['POST'])
def register():
    """Inscription d'un nouvel utilisateur"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "Donn√©es manquantes"}), 400
            
        email = data.get('email')
        password = data.get('password')
        confirm_password = data.get('confirm_password')
        data_consent = data.get('data_consent', False)
        force_register = data.get('force_register', False)  # Option temporaire
        
        if not email or not password or not confirm_password:
            return jsonify({"error": "Tous les champs sont requis"}), 400

        if password != confirm_password:
            return jsonify({"error": "Les mots de passe ne correspondent pas"}), 400
            
        if not data_consent:
            return jsonify({"error": "Vous devez accepter les conditions de traitement des donn√©es"}), 400

        # V√©rifier si l'email existe d√©j√† avant de tenter la cr√©ation
        print(f"üîç DEBUG: V√©rification email existant: {email}")
        existing_user = User.get_by_email(email)
        print(f"üîç DEBUG: R√©sultat get_by_email: {existing_user}")
        
        if existing_user and not force_register:
            print(f"‚ùå DEBUG: Email d√©j√† utilis√© - ID: {existing_user.id}, Email: {existing_user.email}")
            # V√©rifier directement dans la base pour confirmation
            from services.supabase_storage import SupabaseStorage
            supabase = SupabaseStorage()
            try:
                direct_check = supabase.client.table('users').select('*').eq('email', email).execute()
                print(f"üîç DEBUG: V√©rification directe Supabase: {direct_check.data}")
            except Exception as e:
                print(f"‚ö†Ô∏è DEBUG: Erreur v√©rification directe: {e}")
            
            return jsonify({
                "error": "Cette adresse email est d√©j√† utilis√©e",
                "details": f"Un compte existe d√©j√† avec cette adresse email (ID: {existing_user.id}). Veuillez vous connecter ou utiliser une autre adresse.",
                "force_register_available": True
            }), 409

        # Si force_register est activ√©, supprimer l'utilisateur existant
        if existing_user and force_register:
            print(f"‚ö†Ô∏è DEBUG: Force register activ√©, suppression de l'utilisateur existant: {existing_user.id}")
            try:
                from services.supabase_storage import SupabaseStorage
                supabase = SupabaseStorage()
                
                # Supprimer l'utilisateur existant
                delete_response = supabase.client.table('users').delete().eq('id', existing_user.id).execute()
                print(f"üîß DEBUG: Suppression utilisateur existant: {delete_response.data}")
                
                # Supprimer les sessions associ√©es
                session_delete = supabase.client.table('sessions').delete().eq('user_email', email).execute()
                print(f"üîß DEBUG: Suppression sessions: {session_delete.data}")
                
            except Exception as e:
                print(f"‚ùå DEBUG: Erreur lors de la suppression: {e}")

        # Cr√©er l'utilisateur avec debug
        print(f"‚úÖ DEBUG: Email disponible, cr√©ation de l'utilisateur: {email}")
        user = User.create(email, password)
        print(f"‚úÖ DEBUG: Utilisateur cr√©√©: {user}, type={type(user)}")
        
        if user:
            # Cr√©er une session persistante dans Supabase
            user_id = str(user.id)
            
            # Cr√©er une session dans la table sessions (sans user_id, seulement user_email)
            from services.supabase_storage import SupabaseStorage
            supabase = SupabaseStorage()
            
            session_data = {
                'user_email': email,
                'chat_history': [],
                'documents': {},
                'analyses': {},
                'created_at': datetime.datetime.utcnow().isoformat(),
                'updated_at': datetime.datetime.utcnow().isoformat()
            }
            
            try:
                response = supabase.client.table('sessions').insert(session_data).execute()
                if response.data:
                    logging.info(f"‚úÖ Session cr√©√©e dans Supabase pour l'utilisateur: {email}")
                else:
                    logging.warning(f"‚ö†Ô∏è Impossible de cr√©er la session Supabase pour: {email}")
            except Exception as e:
                logging.error(f"‚ùå Erreur cr√©ation session Supabase: {e}")
            
            # G√©n√©rer un token JWT
            token = generate_token(user.id)
            
            return jsonify({
                "success": True,
                "message": "Inscription r√©ussie" + (" (utilisateur existant remplac√©)" if force_register else ""),
                "token": token,
                "user": {
                    "id": user.id,
                    "email": user.email
                },
                "session_created": True
            }), 201
        else:
            # Ce cas ne devrait plus arriver gr√¢ce √† la v√©rification pr√©alable
            return jsonify({
                "error": "Erreur lors de la cr√©ation de l'utilisateur",
                "details": "Une erreur inattendue s'est produite. Veuillez r√©essayer."
            }), 500

    except Exception as e:
        logging.error(f"Erreur lors de l'inscription: {str(e)}")
        return jsonify({
            "error": "Erreur serveur lors de l'inscription",
            "details": "Une erreur inattendue s'est produite. Veuillez r√©essayer plus tard."
        }), 500

@auth_api.route('/login', methods=['GET'])
def login_form():
    return jsonify({"error": "Veuillez vous connecter via l'interface pr√©vue."}), 401

@auth_api.route('/login', methods=['POST'])
def login():
    """Connexion d'un utilisateur avec liaison des donn√©es"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "Donn√©es manquantes"}), 400
            
        email = data.get('email')
        password = data.get('password')
        
        if not email or not password:
            return jsonify({"error": "Email et mot de passe requis"}), 400

        # Authentifier l'utilisateur normal
        user = User.authenticate(email, password)
        if user:
            # Connexion Flask-Login (pour compatibilit√©)
            login_user(user)
            
            # IMPORTANT: R√©cup√©rer les donn√©es individualis√©es de l'utilisateur
            user_id = str(user.id)
            
            # Sauvegarder l'identifiant dans la session Flask
            session['user_id'] = user_id
            session['user_email'] = email
            session.permanent = True  # Rendre la session persistante
            
            # R√©cup√©rer les donn√©es de session de l'utilisateur depuis Supabase
            from services.supabase_storage import SupabaseStorage
            supabase = SupabaseStorage()
            
            user_data = {}
            try:
                response = supabase.client.table('sessions').select('*').eq('user_email', email).execute()
                if response.data and len(response.data) > 0:
                    user_data = response.data[0]
                    logging.info(f"‚úÖ Donn√©es utilisateur r√©cup√©r√©es depuis Supabase: {email}")
                else:
                    # Cr√©er une session si elle n'existe pas
                    session_data = {
                        'user_email': email,
                        'chat_history': [],
                        'documents': {},
                        'analyses': {},
                        'created_at': datetime.datetime.utcnow().isoformat(),
                        'updated_at': datetime.datetime.utcnow().isoformat()
                    }
                    response = supabase.client.table('sessions').insert(session_data).execute()
                    if response.data:
                        user_data = response.data[0]
                        logging.info(f"‚úÖ Nouvelle session cr√©√©e pour l'utilisateur: {email}")
            except Exception as e:
                logging.error(f"‚ùå Erreur r√©cup√©ration donn√©es utilisateur: {e}")
            
            # G√©n√©rer un token JWT
            token = generate_token(user.id)
            
            return jsonify({
                "success": True,
                "message": "Connexion r√©ussie",
                "token": token,
                "user": {
                    "id": user.id,
                    "email": user.email,
                    "is_admin": user.is_admin
                },
                "user_data": {
                    "chat_history": user_data.get('chat_history', []),
                    "documents": user_data.get('documents', {}),
                    "analyses": user_data.get('analyses', {})
                },
                "has_history": len(user_data.get('chat_history', [])) > 0
            }), 200
        else:
            return jsonify({"error": "Email ou mot de passe incorrect"}), 401

    except Exception as e:
        logging.error(f"Erreur lors de la connexion: {e}")
        return jsonify({"error": f"Erreur lors de la connexion: {str(e)}"}), 500

@auth_api.route('/logout', methods=['POST'])
@verify_jwt_token
def logout():
    """D√©connexion d'un utilisateur"""
    try:
        # Sauvegarder les donn√©es avant la d√©connexion
        user_email = request.current_user.email
        
        # Sauvegarder dans Supabase
        from services.supabase_storage import SupabaseStorage
        supabase = SupabaseStorage()
        
        # R√©cup√©rer les donn√©es actuelles
        response = supabase.client.table('sessions').select('*').eq('user_email', user_email).execute()
        if response.data and len(response.data) > 0:
            current_data = response.data[0]
            # Ici on pourrait sauvegarder des donn√©es finales si n√©cessaire
        
        return jsonify({
            "success": True,
            "message": "D√©connexion r√©ussie"
        }), 200
    except Exception as e:
        logging.error(f"Erreur lors de la d√©connexion: {e}")
        return jsonify({"error": f"Erreur lors de la d√©connexion: {str(e)}"}), 500

@auth_api.route('/me', methods=['GET'])
@verify_jwt_token
def get_current_user():
    """R√©cup√®re les informations de l'utilisateur connect√©"""
    try:
        return jsonify({
            "user": {
                "id": request.current_user.id,
                "email": request.current_user.email
            }
        }), 200
    except Exception as e:
        return jsonify({"error": f"Erreur lors de la r√©cup√©ration des donn√©es utilisateur: {str(e)}"}), 500

@auth_api.route('/verify-token', methods=['POST'])
def verify_token():
    """V√©rifie la validit√© d'un token JWT avec debug complet"""
    try:
        # 1. R√©cup√©rer les donn√©es brutes
        print("=== DEBUG VERIFY TOKEN START ===")
        
        data = request.get_json()
        print(f"1. Data re√ßue: {data}, type: {type(data)}")
        
        if not data:
            print("2. Pas de donn√©es JSON")
            return jsonify({"success": False, "error": "Pas de donn√©es JSON"}), 400
        
        # 2. Extraire le token
        token = data.get('token')
        print(f"3. Token extrait: {token}, type: {type(token)}")
        
        if token is None:
            print("4. Token est None")
            return jsonify({"success": False, "error": "Token manquant"}), 400
        
        # 3. V√©rifier que c'est une string
        if not isinstance(token, str):
            print(f"5. Token n'est pas une string, conversion: {token} -> {str(token)}")
            token = str(token)
        
        if token == "None" or token == "null" or not token.strip():
            print("6. Token est vide ou null")
            return jsonify({"success": False, "error": "Token vide ou invalide"}), 400
        
        print(f"7. Token final √† d√©coder: '{token}' (longueur: {len(token)})")
        
        # 4. D√©coder le token
        secret_key = os.environ.get('FLASK_SECRET_KEY') or 'dev_secret_key'
        print(f"8. Secret key: {secret_key[:10]}...")
        
        payload = jwt.decode(token, secret_key, algorithms=['HS256'])
        print(f"9. Payload d√©cod√©: {payload}")
        
        user_id = payload.get('user_id')
        print(f"10. User ID: {user_id}")
        
        # 5. R√©cup√©rer l'utilisateur
        user = User.get(user_id)
        print(f"11. User trouv√©: {user}")
        
        if user:
            print("12. SUCCESS - Token valide")
            return jsonify({
                "success": True,
                "valid": True,
                "user": {
                    "id": user.id,
                    "email": user.email,
                    "is_admin": user.is_admin
                }
            }), 200
        else:
            print("13. User non trouv√©")
            return jsonify({"success": False, "error": "Utilisateur non trouv√©"}), 404
            
    except jwt.ExpiredSignatureError as e:
        print(f"ERROR: Token expir√©: {e}")
        return jsonify({"success": False, "error": "Token expir√©"}), 401
    except jwt.InvalidTokenError as e:
        print(f"ERROR: Token invalide: {e}")
        return jsonify({"success": False, "error": f"Token invalide: {str(e)}"}), 401
    except Exception as e:
        print(f"ERROR: Exception g√©n√©rale: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"success": False, "error": f"Erreur de v√©rification: {str(e)}"}), 500
    finally:
        print("=== DEBUG VERIFY TOKEN END ===")

@auth_api.route('/check-session', methods=['GET'])
def check_session():
    """V√©rifier si l'utilisateur est connect√© et r√©cup√©rer ses donn√©es"""
    try:
        user_id = session.get('user_id')
        user_email = session.get('user_email')
        
        if user_id and user_id != 'anonymous':
            # R√©cup√©rer les donn√©es de l'utilisateur
            user_data = get_session_data()
            
            return jsonify({
                'authenticated': True,
                'user': {
                    'id': user_id,
                    'email': user_email
                },
                'has_data': {
                    'chat_history': len(user_data.get('chat_history', [])) > 0,
                    'cv': user_data.get('documents', {}).get('cv', False),
                    'offre_emploi': user_data.get('documents', {}).get('offre_emploi', False)
                }
            }), 200
        else:
            return jsonify({
                'authenticated': False,
                'user': None
            }), 200
            
    except Exception as e:
        logging.error(f"Erreur lors de la v√©rification de session: {e}")
        return jsonify({'error': str(e)}), 500

@auth_api.route('/save-user-data', methods=['POST'])
@verify_jwt_token
def save_user_data():
    """Sauvegarde les donn√©es de l'utilisateur connect√©"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "Donn√©es manquantes"}), 400
        
        user_email = request.current_user.email
        user_id = str(request.current_user.id)
        
        # Sauvegarder dans Supabase
        from services.supabase_storage import SupabaseStorage
        supabase = SupabaseStorage()
        
        update_data = {
            'chat_history': data.get('chat_history', []),
            'documents': data.get('documents', {}),
            'analyses': data.get('analyses', {}),
            'updated_at': datetime.datetime.utcnow().isoformat()
        }
        
        response = supabase.client.table('sessions').update(update_data).eq('user_email', user_email).execute()
        
        if response.data:
            return jsonify({
                "success": True,
                "message": "Donn√©es sauvegard√©es avec succ√®s"
            }), 200
        else:
            return jsonify({"error": "Erreur lors de la sauvegarde"}), 500
            
    except Exception as e:
        logging.error(f"Erreur lors de la sauvegarde des donn√©es: {e}")
        return jsonify({"error": f"Erreur lors de la sauvegarde: {str(e)}"}), 500

@auth_api.route('/get-user-data', methods=['GET'])
@verify_jwt_token
def get_user_data():
    """R√©cup√®re les donn√©es de l'utilisateur connect√©"""
    try:
        user_email = request.current_user.email
        
        # R√©cup√©rer depuis Supabase
        from services.supabase_storage import SupabaseStorage
        supabase = SupabaseStorage()
        
        response = supabase.client.table('sessions').select('*').eq('user_email', user_email).execute()
        
        if response.data and len(response.data) > 0:
            user_data = response.data[0]
            return jsonify({
                "success": True,
                "user_data": {
                    "chat_history": user_data.get('chat_history', []),
                    "documents": user_data.get('documents', {}),
                    "analyses": user_data.get('analyses', {})
                }
            }), 200
        else:
            return jsonify({
                "success": True,
                "user_data": {
                    "chat_history": [],
                    "documents": {},
                    "analyses": {}
                }
            }), 200
            
    except Exception as e:
        logging.error(f"Erreur lors de la r√©cup√©ration des donn√©es: {e}")
        return jsonify({"error": f"Erreur lors de la r√©cup√©ration: {str(e)}"}), 500

@auth_api.route('/debug/users', methods=['GET'])
def debug_users():
    """Endpoint de debug pour v√©rifier les utilisateurs dans la base"""
    try:
        from services.supabase_storage import SupabaseStorage
        supabase = SupabaseStorage()
        
        # R√©cup√©rer tous les utilisateurs
        response = supabase.client.table('users').select('*').execute()
        
        if response.data:
            users_info = []
            for user in response.data:
                users_info.append({
                    'id': user.get('id'),
                    'email': user.get('email'),
                    'is_admin': user.get('is_admin', False),
                    'created_at': user.get('created_at')
                })
            
            return jsonify({
                "success": True,
                "total_users": len(users_info),
                "users": users_info
            }), 200
        else:
            return jsonify({
                "success": False,
                "error": "Aucun utilisateur trouv√©"
            }), 404
            
    except Exception as e:
        return jsonify({
            "success": False,
            "error": f"Erreur lors de la r√©cup√©ration des utilisateurs: {str(e)}"
        }), 500

@auth_api.route('/debug/check-email/<email>', methods=['GET'])
def debug_check_email(email):
    """Endpoint de debug pour v√©rifier un email sp√©cifique"""
    try:
        from services.supabase_storage import SupabaseStorage
        supabase = SupabaseStorage()
        
        print(f"üîç DEBUG: V√©rification email: {email}")
        
        # V√©rifier l'email directement
        response = supabase.client.table('users').select('*').eq('email', email).execute()
        print(f"üîç DEBUG: R√©ponse Supabase brute: {response}")
        print(f"üîç DEBUG: Donn√©es: {response.data}")
        
        if response.data and len(response.data) > 0:
            user_data = response.data[0]
            print(f"‚úÖ DEBUG: Utilisateur trouv√©: {user_data}")
            return jsonify({
                "success": True,
                "email_exists": True,
                "user": {
                    'id': user_data.get('id'),
                    'email': user_data.get('email'),
                    'is_admin': user_data.get('is_admin', False),
                    'created_at': user_data.get('created_at')
                }
            }), 200
        else:
            print(f"‚ùå DEBUG: Aucun utilisateur trouv√© pour {email}")
            return jsonify({
                "success": True,
                "email_exists": False,
                "message": f"L'email {email} n'existe pas dans la base"
            }), 200
            
    except Exception as e:
        print(f"‚ùå DEBUG: Erreur: {e}")
        return jsonify({
            "success": False,
            "error": f"Erreur lors de la v√©rification de l'email: {str(e)}"
        }), 500
