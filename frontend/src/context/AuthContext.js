import React, { createContext, useState, useContext, useEffect } from 'react';
import toast from 'react-hot-toast';
import api from '../services/api';

const AuthContext = createContext({});

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [token, setToken] = useState(() => {
    try {
      return localStorage.getItem('token');
    } catch {
      return null;
    }
  });

  // V√©rifier le token au chargement
  useEffect(() => {
    const verifyAndLoadUser = async () => {
      if (token && token !== 'null' && token !== 'undefined' && token !== 'demo_token') {
        try {
          // V√©rifier le token c√¥t√© serveur
          const response = await api.post('/api/auth/verify-token', { token });

          if (response.data.success && response.data.user) {
            setUser({
              id: response.data.user.id,
              email: response.data.user.email,
              isAdmin: response.data.user.is_admin || false
            });
          } else {
            // Token invalide
            localStorage.removeItem('token');
            localStorage.removeItem('user_email');
            setToken(null);
            setUser(null);
          }
        } catch (error) {
          console.error('Erreur v√©rification token:', error);
          // En cas d'erreur r√©seau, garder l'utilisateur avec l'email stock√©
          const storedEmail = localStorage.getItem('user_email');
          if (storedEmail && token) {
            setUser({
              id: 'offline',
              email: storedEmail,
              isAdmin: false
            });
          }
        }
      }
      setLoading(false);
    };

    verifyAndLoadUser();
  }, [token]);

  const login = async (email, password) => {
    try {
      setLoading(true);
      
      // Validation basique
      if (!email || !password) {
        throw new Error('Email et mot de passe requis');
      }

      // Appel API de connexion
      console.log('üîç Tentative de connexion pour:', email);
      const response = await api.post('/api/auth/login', { email, password });
      
      console.log('üì° R√©ponse API compl√®te:', response);
      console.log('üì° Response.data:', response.data);
      console.log('üì° Response.data.success:', response.data.success);
      console.log('üì° Response.data.token:', response.data.token);

      if (response.data.success) {
        const userToken = response.data.token;
        console.log('üé´ Token re√ßu:', userToken);
        
        const userData = {
          id: response.data.user?.id || response.data.user_id || 'new',
          email: email, // Utiliser l'email fourni
          isAdmin: response.data.user?.is_admin || false
        };
        
        console.log('üë§ UserData:', userData);
        
        // Sauvegarder dans localStorage
        try {
          console.log('üíæ Tentative de sauvegarde dans localStorage...');
          localStorage.setItem('token', userToken);
          localStorage.setItem('user_email', email);
          console.log('‚úÖ Token sauvegard√© dans localStorage');
          console.log('üîç V√©rification localStorage.getItem("token"):', localStorage.getItem('token'));
        } catch (e) {
          console.warn('‚ùå LocalStorage non disponible:', e);
        }
        
        setToken(userToken);
        setUser(userData);
        
        toast.success('Connexion r√©ussie !');
        return { success: true };
      } else {
        // Erreur de connexion
        const errorMessage = response.data.error || 'Email ou mot de passe incorrect';
        throw new Error(errorMessage);
      }
    } catch (error) {
      const message = error.message || 'Erreur de connexion';
      toast.error(message);
      return { success: false, error: message };
    } finally {
      setLoading(false);
    }
  };

  const register = async (email, password, confirmPassword) => {
    try {
      setLoading(true);
      
      // Validations
      if (!email || !password || !confirmPassword) {
        throw new Error('Tous les champs sont requis');
      }
      
      if (password !== confirmPassword) {
        throw new Error('Les mots de passe ne correspondent pas');
      }
      
      if (password.length < 6) {
        throw new Error('Le mot de passe doit contenir au moins 6 caract√®res');
      }
      
      // Appel API d'inscription
      console.log('üîç Tentative d\'inscription pour:', email);
      const response = await api.post('/api/auth/register', { 
        email, 
        password, 
        confirm_password: confirmPassword,
        data_consent: true 
      });
      
      console.log('üì° R√©ponse API inscription compl√®te:', response);
      console.log('üì° Response.data inscription:', response.data);
      console.log('üì° Response.data.success inscription:', response.data.success);
      console.log('üì° Response.data.token inscription:', response.data.token);

      if (response.data.success) {
        const userToken = response.data.token;
        console.log('üé´ Token inscription re√ßu:', userToken);
        
        const userData = {
          id: response.data.user?.id || response.data.user_id || 'new',
          email: email,
          isAdmin: false
        };
        
        console.log('üë§ UserData inscription:', userData);
        
        try {
          console.log('üíæ Tentative de sauvegarde inscription dans localStorage...');
          localStorage.setItem('token', userToken);
          localStorage.setItem('user_email', email);
          console.log('‚úÖ Token inscription sauvegard√© dans localStorage');
          console.log('üîç V√©rification localStorage.getItem("token"):', localStorage.getItem('token'));
        } catch (e) {
          console.warn('‚ùå LocalStorage non disponible inscription:', e);
        }
        
        setToken(userToken);
        setUser(userData);
        
        toast.success('Inscription r√©ussie !');
        return { success: true };
      } else {
        // G√©rer les erreurs sp√©cifiques
        const errorMessage = response.data.error || 'Erreur lors de l\'inscription';
        throw new Error(errorMessage);
      }
    } catch (error) {
      console.error('‚ùå Erreur inscription d√©taill√©e:', error);
      
      // G√©rer les erreurs sp√©cifiques
      let message = 'Erreur lors de l\'inscription';
      
      if (error.status === 409) {
        // Email "d√©j√† utilis√©" - v√©rifier si c'est un faux positif
        console.log('‚ö†Ô∏è Email marqu√© comme d√©j√† utilis√©, tentative de force register...');
        
        try {
          // Essayer avec force_register
          const forceResponse = await api.post('/api/auth/register', { 
            email, 
            password, 
            confirm_password: confirmPassword,
            data_consent: true,
            force_register: true
          });
          
          if (forceResponse.data.success) {
            console.log('‚úÖ Force register r√©ussi !');
            const userToken = forceResponse.data.token;
            
            const userData = {
              id: forceResponse.data.user?.id || 'new',
              email: email,
              isAdmin: false
            };
            
            try {
              localStorage.setItem('token', userToken);
              localStorage.setItem('user_email', email);
            } catch (e) {
              console.warn('‚ùå LocalStorage non disponible:', e);
            }
            
            setToken(userToken);
            setUser(userData);
            
            toast.success('Inscription r√©ussie ! (ancien compte nettoy√©)');
            return { success: true };
          }
        } catch (forceError) {
          console.log('‚ùå Force register √©chou√©:', forceError);
        }
        
        message = 'Cette adresse email est d√©j√† utilis√©e. Veuillez vous connecter ou utiliser une autre adresse.';
      } else if (error.status === 400) {
        message = error.message || 'Donn√©es invalides. Veuillez v√©rifier vos informations.';
      } else if (error.status === 500) {
        message = 'Erreur serveur. Veuillez r√©essayer plus tard.';
      } else if (error.message) {
        message = error.message;
      }
      
      toast.error(message);
      return { success: false, error: message };
    } finally {
      setLoading(false);
    }
  };

  const logout = async () => {
    try {
      // Appel API de d√©connexion (optionnel)
      if (token) {
        await api.post('/api/auth/logout', {}).catch(() => {
          // Ignorer les erreurs de d√©connexion
        });
      }
    } catch (error) {
      console.error('Erreur lors de la d√©connexion:', error);
    }
    
    // Nettoyer le localStorage et l'√©tat
    try {
      localStorage.removeItem('token');
      localStorage.removeItem('user_email');
      localStorage.removeItem('iamonjob_data');
    } catch (e) {
      console.warn('LocalStorage non disponible');
    }
    
    setToken(null);
    setUser(null);
    toast.success('D√©connexion r√©ussie');
  };

  const value = {
    user,
    token,
    loading,
    login,
    register,
    logout,
    isAuthenticated: !!user,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};
